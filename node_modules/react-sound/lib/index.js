'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _soundmanager2 = require('soundmanager2');

function noop() {}

var playStatuses = {
  PLAYING: 'PLAYING',
  STOPPED: 'STOPPED',
  PAUSED: 'PAUSED'
};

var Sound = (function (_React$Component) {
  function Sound() {
    _classCallCheck(this, Sound);

    _get(Object.getPrototypeOf(Sound.prototype), 'constructor', this).apply(this, arguments);
  }

  _inherits(Sound, _React$Component);

  _createClass(Sound, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.createSound();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.removeSound();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.url !== prevProps.url) {
        this.createSound();
      }

      if (!this.sound) {
        return;
      }

      if (this.props.playStatus === playStatuses.PLAYING) {
        if (prevProps.playStatus === playStatuses.STOPPED) {
          this.sound.play();
        } else if (prevProps.playStatus === playStatuses.PAUSED) {
          this.sound.resume();
        }
      } else if (this.props.playStatus === playStatuses.STOPPED && prevProps.playStatus !== playStatuses.STOPPED) {
        this.sound.stop();
      } else {
        // 'PAUSED'
        if (prevProps.playStatus === playStatuses.PLAYING) {
          this.sound.pause();
        }
      }

      if (this.props.startFromPosition !== prevProps.startFromPosition) {
        this.sound.setPosition(this.props.startFromPosition);
      }

      if (this.sound.position != null) {
        if (this.sound.position !== this.props.position && Math.round(this.sound.position) !== Math.round(this.props.position)) {

          this.sound.setPosition(this.props.position);
        }
      }
    }
  }, {
    key: 'createSound',
    value: function createSound() {
      if (this.sound) {
        this.removeSound();
      }
      var props = this.props;

      if (!props.url) {
        return;
      }

      this.sound = _soundmanager2.soundManager.createSound({
        url: this.props.url,
        whileloading: function whileloading() {
          props.onLoading(this);
        },
        whileplaying: function whileplaying() {
          props.onPlaying(this);
        },
        onfinish: function onfinish() {
          props.onFinishedPlaying();
        }
      });
    }
  }, {
    key: 'removeSound',
    value: function removeSound() {
      if (!this.sound) {
        return;
      }

      try {
        this.sound.destruct();
      } catch (e) {} // eslint-disable-line

      delete this.sound;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2['default'].createElement('noscript', null);
    }
  }], [{
    key: 'status',
    value: playStatuses,
    enumerable: true
  }, {
    key: 'propTypes',
    value: {
      url: _react.PropTypes.string.isRequired,
      playStatus: _react.PropTypes.oneOf(playStatuses).isRequired,
      position: _react.PropTypes.number,
      startFromPosition: _react.PropTypes.number,
      onLoading: _react.PropTypes.func,
      onPlaying: _react.PropTypes.func,
      onFinishedPlaying: _react.PropTypes.func
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      startFromPosition: 0,
      onLoading: noop,
      onPlaying: noop,
      onFinishedPlaying: noop
    },
    enumerable: true
  }]);

  return Sound;
})(_react2['default'].Component);

exports['default'] = Sound;
module.exports = exports['default'];